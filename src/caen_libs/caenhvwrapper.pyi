import ctypes.wintypes as ct
from caen_libs import _utils
from enum import IntEnum
from typing import Any, List, Optional, Sequence, Tuple, Type, Union

class ErrorCode(IntEnum):
    UNKNOWN: int = ...
    OK: int = ...
    SYSERR: int = ...
    WRITEERR: int = ...
    READERR: int = ...
    TIMEERR: int = ...
    DOWN: int = ...
    NOTPRES: int = ...
    SLOTNOTPRES: int = ...
    NOSERIAL: int = ...
    MEMORYFAULT: int = ...
    OUTOFRANGE: int = ...
    EXECCOMNOTIMPL: int = ...
    GETPROPNOTIMPL: int = ...
    SETPROPNOTIMPL: int = ...
    PROPNOTFOUND: int = ...
    EXECNOTFOUND: int = ...
    NOTSYSPROP: int = ...
    NOTGETPROP: int = ...
    NOTSETPROP: int = ...
    NOTEXECOMM: int = ...
    SYSCONFCHANGE: int = ...
    PARAMPROPNOTFOUND: int = ...
    PARAMNOTFOUND: int = ...
    NODATA: int = ...
    DEVALREADYOPEN: int = ...
    TOOMANYDEVICEOPEN: int = ...
    INVALIDPARAMETER: int = ...
    FUNCTIONNOTAVAILABLE: int = ...
    SOCKETERROR: int = ...
    COMMUNICATIONERROR: int = ...
    NOTYETIMPLEMENTED: int = ...
    CONNECTED: Any = ...
    NOTCONNECTED: Any = ...
    OS: Any = ...
    LOGINFAILED: Any = ...
    LOGOUTFAILED: Any = ...
    LINKNOTSUPPORTED: Any = ...
    USERPASSFAILED: Any = ...

class SystemType(IntEnum):
    SY1527: int = ...
    SY2527: int = ...
    SY4527: int = ...
    SY5527: int = ...
    N568: int = ...
    V65XX: int = ...
    N1470: int = ...
    V8100: int = ...
    N568E: int = ...
    DT55XX: int = ...
    FTK: int = ...
    DT55XXE: int = ...
    N1068: int = ...
    SMARTHV: int = ...
    NGPS: int = ...
    N1168: int = ...
    R6060: int = ...

class LinkType(IntEnum):
    TCPIP: int = ...
    RS232: int = ...
    CAENET: int = ...
    USB: int = ...
    OPTLINK: int = ...
    USB_VCP: int = ...
    USB3: int = ...
    A4818: int = ...

class EventStatus(IntEnum):
    SYNC: int = ...
    ASYNC: int = ...
    UNSYNC: int = ...
    NOTAVAIL: int = ...

class _SystemStatusRaw(ct.Structure): ...

class SystemStatus:
    system: EventStatus
    board: Tuple[EventStatus, ...]
    def __init__(self, system: Any, board: Any) -> None: ...

class EventType(IntEnum):
    PARAMETER: int = ...
    ALARM: int = ...
    KEEPALIVE: int = ...
    TRMODE: int = ...

class _IdValueRaw(ct.Union): ...
class _EventDataRaw(ct.Structure): ...

class EventData:
    type: EventType
    item_id: str
    board_index: int = ...
    channel_index: int = ...
    value: Union[str, float, int] = ...
    def __init__(self, type: Any, item_id: Any, board_index: Any, channel_index: Any, value: Any) -> None: ...

class Board:
    model: str
    description: str
    serial_number: int
    n_channel: int
    fw_version: Tuple[int, ...]
    def __init__(self, model: Any, description: Any, serial_number: Any, n_channel: Any, fw_version: Any) -> None: ...

class SysPropType(IntEnum):
    STR: int = ...
    REAL: int = ...
    UINT2: int = ...
    UINT4: int = ...
    INT2: int = ...
    INT4: int = ...
    BOOLEAN: int = ...

class SysPropMode(IntEnum):
    RDONLY: int = ...
    WRONLY: int = ...
    RDWR: int = ...

class SysProp:
    name: str
    mode: SysPropMode
    type: SysPropType
    def __init__(self, name: Any, mode: Any, type: Any) -> None: ...

class ParamType(IntEnum):
    NUMERIC: int = ...
    ONOFF: int = ...
    CHSTATUS: int = ...
    BDSTATUS: int = ...
    BINARY: int = ...
    STRING: int = ...
    ENUM: int = ...
    CMD: int = ...

class ParamMode(IntEnum):
    RDONLY: int = ...
    WRONLY: int = ...
    RDWR: int = ...

class ParamUnit(IntEnum):
    NONE: int = ...
    AMPERE: int = ...
    VOLT: int = ...
    WATT: int = ...
    CELSIUS: int = ...
    HERTZ: int = ...
    BAR: int = ...
    VPS: int = ...
    SECOND: int = ...
    RPM: int = ...
    COUNT: int = ...
    BIT: int = ...
    APS: int = ...

class ParamProp:
    type: ParamType
    mode: ParamMode
    minval: Optional[float] = ...
    maxval: Optional[float] = ...
    unit: Optional[ParamUnit] = ...
    exp: Optional[int] = ...
    decimal: Optional[int] = ...
    onstate: Optional[str] = ...
    offstate: Optional[str] = ...
    enum: Optional[List[str]] = ...
    def __init__(self, type: Any, mode: Any, minval: Any, maxval: Any, unit: Any, exp: Any, decimal: Any, onstate: Any, offstate: Any, enum: Any) -> None: ...

class Error(RuntimeError):
    code: ErrorCode
    message: str
    func: str
    def __init__(self, res: int, func: str) -> None: ...

class _Lib(_utils.Lib):
    def __init__(self, name: str) -> None: ...
    def sw_release(self) -> str: ...
    def auto_ptr(self, pointer_type: Type) -> Any: ...
    def evt_data_auto_ptr(self, pointer_type: Type) -> Any: ...

lib: _Lib

class Device:
    handle: int
    opened: bool = ...
    system_type: SystemType = ...
    link_type: LinkType = ...
    arg: str = ...
    username: str = ...
    password: str = ...
    MAX_PARAM_NAME: int = ...
    MAX_CH_NAME: int = ...
    FIRST_BIND_PORT: int = ...
    def __post_init__(self) -> None: ...
    def __del__(self) -> None: ...
    @classmethod
    def open(cls: Type[_T], system_type: SystemType, link_type: LinkType, arg: str, username: str=..., password: str=...) -> _T: ...
    def connect(self) -> None: ...
    def close(self) -> None: ...
    def get_crate_map(self) -> List[Board]: ...
    def get_sys_prop_list(self) -> List[str]: ...
    def get_sys_prop_info(self, name: str) -> SysProp: ...
    def get_sys_prop(self, name: str) -> Union[str, float, int, bool]: ...
    def set_sys_prop(self, name: str, value: Union[str, float, int, bool]) -> None: ...
    def get_bd_param(self, slot_list: Sequence[int], name: str) -> Union[List[str], List[float], List[int]]: ...
    def set_bd_param(self, slot_list: Sequence[int], name: str, value: Union[str, float, int]) -> None: ...
    def get_bd_param_prop(self, slot: int, name: str) -> ParamProp: ...
    def get_bd_param_info(self, slot: int) -> List[str]: ...
    def test_bd_presence(self, slot: int) -> Board: ...
    def get_ch_param_prop(self, slot: int, channel: int, name: str) -> ParamProp: ...
    def get_ch_param_info(self, slot: int, channel: int) -> List[str]: ...
    def get_ch_name(self, slot: int, channel_list: Sequence[int]) -> List[str]: ...
    def set_ch_name(self, slot: int, channel_list: Sequence[int], name: str) -> None: ...
    def get_ch_param(self, slot: int, channel_list: Sequence[int], name: str) -> Union[List[str], List[float], List[int]]: ...
    def set_ch_param(self, slot: int, channel_list: Sequence[int], name: str, value: Union[str, float, int]) -> None: ...
    def get_exec_comm_list(self) -> List[str]: ...
    def exec_comm(self, name: str) -> None: ...
    def subscribe_system_params(self, param_list: Sequence[str]) -> None: ...
    def subscribe_board_params(self, slot: int, param_list: Sequence[str]) -> None: ...
    def subscribe_channel_params(self, slot: int, channel: int, param_list: Sequence[str]) -> None: ...
    def unsubscribe_system_params(self, param_list: Sequence[str]) -> None: ...
    def unsubscribe_board_params(self, slot: int, param_list: Sequence[str]) -> None: ...
    def unsubscribe_channel_params(self, slot: int, channel: int, param_list: Sequence[str]) -> None: ...
    def get_event_data(self) -> Tuple[List[EventData], SystemStatus]: ...
    def get_error(self) -> str: ...
    def device_closed(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...
    def __hash__(self) -> int: ...
    def __init__(self, handle: Any, opened: Any, system_type: Any, link_type: Any, arg: Any, username: Any, password: Any) -> None: ...
