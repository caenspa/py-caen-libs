import ctypes as ct
from caen_libs import _utils
from enum import Flag, IntEnum
from typing import Any, List, Sequence, Tuple, Type, Union

class ErrorCode(IntEnum):
    SUCCESS: int = ...
    BUS_ERROR: int = ...
    COMM_ERROR: int = ...
    GENERIC_ERROR: int = ...
    INVALID_PARAM: int = ...
    TIMEOUT_ERROR: int = ...
    ALREADY_OPEN_ERROR: int = ...
    MAX_BOARD_COUNT_ERROR: int = ...
    NOT_SUPPORTED: int = ...

class BoardType(IntEnum):
    V1718: int = ...
    V2718: int = ...
    USB_A4818_V2718_LOCAL: int = ...
    USB_A4818_V2718: int = ...
    USB_V3718_LOCAL: int = ...
    USB_V3718: int = ...
    PCI_A2818_V3718_LOCAL: int = ...
    PCI_A2818_V3718: int = ...
    PCIE_A3818_V3718_LOCAL: int = ...
    PCIE_A3818_V3718: int = ...
    USB_A4818_V3718_LOCAL: int = ...
    USB_A4818_V3718: int = ...
    PCIE_A5818_V3718_LOCAL: int = ...
    PCIE_A5818_V3718: int = ...
    USB_V4718_LOCAL: int = ...
    USB_V4718: int = ...
    ETH_V4718_LOCAL: int = ...
    ETH_V4718: int = ...
    PCI_A2818_V4718_LOCAL: int = ...
    PCI_A2818_V4718: int = ...
    PCIE_A3818_V4718_LOCAL: int = ...
    PCIE_A3818_V4718: int = ...
    USB_A4818_V4718_LOCAL: int = ...
    USB_A4818_V4718: int = ...
    PCIE_A5818_V4718_LOCAL: int = ...
    PCIE_A5818_V4718: int = ...
    USB_A4818: int = ...
    A2818: int = ...
    A3818: int = ...
    USB_A4818_LOCAL: int = ...
    A5818: int = ...
    A2719: int = ...
    USB_A4818_A2719_LOCAL: int = ...
    INVALID: int = ...

class DataWidth(IntEnum):
    D8: int = ...
    D16: int = ...
    D32: int = ...
    D64: int = ...
    DSWAP_: int = ...
    D16_SWAP: Any = ...
    D32_SWAP: Any = ...
    D64_SWAP: Any = ...
    @property
    def ctypes(self) -> Type: ...

class AddressModifiers(IntEnum):
    A16_S: int = ...
    A16_U: int = ...
    A16_LCK: int = ...
    A24_S_BLT: int = ...
    A24_S_PGM: int = ...
    A24_S_DATA: int = ...
    A24_S_MBLT: int = ...
    A24_U_BLT: int = ...
    A24_U_PGM: int = ...
    A24_U_DATA: int = ...
    A24_U_MBLT: int = ...
    A24_LCK: int = ...
    A32_S_BLT: int = ...
    A32_S_PGM: int = ...
    A32_S_DATA: int = ...
    A32_S_MBLT: int = ...
    A32_U_BLT: int = ...
    A32_U_PGM: int = ...
    A32_U_DATA: int = ...
    A32_U_MBLT: int = ...
    A32_LCK: int = ...
    CR_CSR: int = ...
    A40_BLT: int = ...
    A40_LCK: int = ...
    A40: int = ...
    A64: int = ...
    A64_BLT: int = ...
    A64_MBLT: int = ...
    A64_LCK: int = ...
    A3U_2eVME: int = ...
    A6U_2eVME: int = ...

class PulserSelect(IntEnum):
    A: int = ...
    B: int = ...

class OutputSelect(IntEnum):
    O0: int = ...
    O1: int = ...
    O2: int = ...
    O3: int = ...
    O4: int = ...

class InputSelect(IntEnum):
    I0: int = ...
    I1: int = ...

class IOSources(IntEnum):
    MANUAL_SW: int = ...
    INPUT_SRC_0: int = ...
    INPUT_SRC_1: int = ...
    COINCIDENCE: int = ...
    VME_SIGNALS: int = ...
    MISC_SIGNALS: int = ...
    PULSER_V3718A: int = ...
    PULSER_V3718B: int = ...
    SCALER_END: int = ...

class TimeUnits(IntEnum):
    T25_NS: int = ...
    T1600_NS: int = ...
    T410_US: int = ...
    T104_MS: int = ...
    T25_US: int = ...

class LEDPolarity(IntEnum):
    ACTIVE_HIGH: int = ...
    ACTIVE_LOW: int = ...

class IOPolarity(IntEnum):
    DIRECT: int = ...
    INVERTED: int = ...

class IRQLevels(Flag):
    L1: int = ...
    L2: int = ...
    L3: int = ...
    L4: int = ...
    L5: int = ...
    L6: int = ...
    L7: int = ...

class _DisplayRaw(ct.Structure): ...

class Display:
    address: int
    data: int
    am: AddressModifiers
    irq: IRQLevels
    ds0: bool
    ds1: bool
    as_: bool
    iack: bool
    write: bool
    lword: bool
    dtack: bool
    berr: bool
    sysres: bool
    br: bool
    bg: bool
    def __init__(self, address: Any, data: Any, am: Any, irq: Any, ds0: Any, ds1: Any, as_: Any, iack: Any, write: Any, lword: Any, dtack: Any, berr: Any, sysres: Any, br: Any, bg: Any) -> None: ...

class ArbiterTypes(IntEnum):
    PRIORIZED: int = ...
    ROUNDROBIN: int = ...

class RequesterTypes(IntEnum):
    FAIR: int = ...
    DEMAND: int = ...

class ReleaseTypes(IntEnum):
    RWD: int = ...
    ROR: int = ...

class BusReqLevels(IntEnum):
    BR0: int = ...
    BR1: int = ...
    BR2: int = ...
    BR3: int = ...

class VMETimeouts(IntEnum): ...

class ScalerSource(IntEnum):
    IN0: int = ...
    IN1: int = ...
    DTACK: int = ...
    BERR: int = ...
    DS: int = ...
    AS: int = ...
    SW: int = ...
    FP_BUTTON: int = ...
    COINC: int = ...
    INOR: int = ...

class ScalerMode(IntEnum):
    GATE_MODE: int = ...
    DWELL_TIME_MODE: int = ...
    MAX_HITS_MODE: int = ...

class ContinuosRun(IntEnum):
    OFF: int = ...
    ON: int = ...

class Error(RuntimeError):
    code: ErrorCode
    message: str
    func: str
    def __init__(self, message: str, res: int, func: str) -> None: ...

class _Lib(_utils.Lib):
    def __init__(self, name: str) -> None: ...
    def sw_release(self) -> str: ...

lib: _Lib

class Device:
    handle: int
    opened: bool = ...
    board_type: BoardType = ...
    arg: Union[int, str] = ...
    conet_node: int = ...
    def __del__(self) -> None: ...
    @classmethod
    def open(cls: Type[_T], board_type: BoardType, arg: Union[int, str], conet_node: int=...) -> _T: ...
    def connect(self) -> None: ...
    def close(self) -> None: ...
    def board_fw_release(self) -> str: ...
    def driver_release(self) -> str: ...
    def device_reset(self) -> None: ...
    def read_cycle(self, address: int, am: AddressModifiers, dw: DataWidth) -> int: ...
    def rmw_cycle(self, address: int, value: int, am: AddressModifiers, dw: DataWidth) -> int: ...
    def write_cycle(self, address: int, value: int, am: AddressModifiers, dw: DataWidth) -> None: ...
    def multi_read(self, addrs: Sequence[int], ams: Sequence[AddressModifiers], dws: Sequence[DataWidth]) -> List[int]: ...
    def multi_write(self, addrs: Sequence[int], data: Sequence[int], ams: Sequence[AddressModifiers], dws: Sequence[DataWidth]) -> None: ...
    def blt_read_cycle(self, address: int, size: int, am: AddressModifiers, dw: DataWidth) -> List[int]: ...
    def fifo_blt_read_cycle(self, address: int, size: int, am: AddressModifiers, dw: DataWidth) -> List[int]: ...
    def mblt_read_cycle(self, address: int, size: int, am: AddressModifiers) -> bytes: ...
    def fifo_mblt_read_cycle(self, address: int, size: int, am: AddressModifiers) -> bytes: ...
    def blt_write_cycle(self, address: int, data: Sequence[int], am: AddressModifiers, dw: DataWidth) -> int: ...
    def fifo_blt_write_cycle(self, address: int, data: Sequence[int], am: AddressModifiers, dw: DataWidth) -> int: ...
    def mblt_write_cycle(self, address: int, data: bytes, am: AddressModifiers) -> int: ...
    def fifo_mblt_write_cycle(self, address: int, data: bytes, am: AddressModifiers) -> int: ...
    def ado_cycle(self, address: int, am: AddressModifiers) -> None: ...
    def adoh_cycle(self, address: int, am: AddressModifiers) -> None: ...
    def iack_cycle(self, levels: IRQLevels, dw: DataWidth) -> int: ...
    def irq_check(self) -> IRQLevels: ...
    def irq_enable(self, mask: IRQLevels) -> None: ...
    def irq_disable(self, mask: IRQLevels) -> None: ...
    def irq_wait(self, mask: IRQLevels, timeout: int) -> None: ...
    def set_pulser_conf(self, pul_sel: PulserSelect, period: int, width: int, unit: TimeUnits, pulse_no: int, start: IOSources, reset: IOSources) -> None: ...
    def set_scaler_conf(self, limit: int, auto_reset: int, hit: IOSources, gate: IOSources, reset: IOSources) -> None: ...
    def set_output_conf(self, out_sel: OutputSelect, out_pol: IOPolarity, led_pol: LEDPolarity, source: IOSources) -> None: ...
    def set_input_conf(self, in_sel: InputSelect, in_pol: IOPolarity, led_pol: LEDPolarity) -> None: ...
    def get_pulser_conf(self, pul_sel: PulserSelect) -> Tuple[int, int, TimeUnits, int, IOSources, IOSources]: ...
    def get_scaler_conf(self) -> Tuple[int, int, IOSources, IOSources, IOSources]: ...
    def get_output_conf(self, out_sel: OutputSelect) -> Tuple[IOPolarity, LEDPolarity, IOSources]: ...
    def get_input_conf(self, in_sel: InputSelect) -> Tuple[IOPolarity, LEDPolarity]: ...
    def read_register(self, address: int) -> int: ...
    def write_register(self, address: int, value: int) -> None: ...
    def write_flash_page(self, page_num: int, data: bytes) -> None: ...
    def set_output_register(self, mask: int) -> None: ...
    def clear_output_register(self, mask: int) -> None: ...
    def pulse_output_register(self, mask: int) -> None: ...
    def read_display(self) -> Display: ...
    def set_arbiter_type(self, value: ArbiterTypes) -> None: ...
    def set_requester_type(self, value: RequesterTypes) -> None: ...
    def set_release_type(self, value: ReleaseTypes) -> None: ...
    def set_bus_req_level(self, value: BusReqLevels) -> None: ...
    def set_timeout(self, value: VMETimeouts) -> None: ...
    def set_location_monitor(self, addr: int, am: AddressModifiers, write: int, lword: int, iack: int) -> None: ...
    def set_fifo_mode(self, value: int) -> None: ...
    def get_arbiter_type(self) -> ArbiterTypes: ...
    def get_requester_type(self) -> RequesterTypes: ...
    def get_release_type(self, value: ReleaseTypes) -> ReleaseTypes: ...
    def get_bus_req_level(self) -> BusReqLevels: ...
    def get_timeout(self) -> VMETimeouts: ...
    def system_reset(self) -> None: ...
    def reset_scaler_count(self) -> None: ...
    def enable_scaler_gate(self) -> None: ...
    def disable_scaler_gate(self) -> None: ...
    def start_pulser(self, pulsel: PulserSelect) -> None: ...
    def stop_pulser(self, pulsel: PulserSelect) -> None: ...
    def read_flash_page(self, page_num: int) -> bytes: ...
    def erase_flash_page(self, page_num: int) -> None: ...
    def set_scaler_input_source(self, source: ScalerSource) -> None: ...
    def get_scaler_input_source(self) -> ScalerSource: ...
    def set_scaler_gate_source(self, source: ScalerSource) -> None: ...
    def get_scaler_gate_source(self) -> ScalerSource: ...
    def set_scaler_mode(self, mode: ScalerMode) -> None: ...
    def get_scaler_mode(self) -> ScalerMode: ...
    def set_scaler_clear_source(self, source: ScalerSource) -> None: ...
    def set_scaler_start_source(self, source: ScalerSource) -> None: ...
    def get_scaler_start_source(self) -> ScalerSource: ...
    def set_scaler_continuous_run(self, value: ContinuosRun) -> None: ...
    def get_scaler_continuous_run(self) -> ContinuosRun: ...
    def set_scaler_max_hits(self, value: int) -> None: ...
    def get_scaler_max_hits(self) -> int: ...
    def set_scaler_dwell_time(self, value: int) -> None: ...
    def get_scaler_dwell_time(self) -> int: ...
    def set_scaler_sw_start(self) -> None: ...
    def set_scaler_sw_stop(self) -> None: ...
    def set_scaler_sw_reset(self) -> None: ...
    def set_scaler_sw_open_gate(self) -> None: ...
    def set_scaler_sw_close_gate(self) -> None: ...
    def blt_read_async(self, address: int, size: int, am: AddressModifiers, dw: DataWidth) -> List[int]: ...
    def blt_read_wait(self) -> int: ...
    def device_closed(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...
    def __init__(self, handle: Any, opened: Any, board_type: Any, arg: Any, conet_node: Any) -> None: ...
