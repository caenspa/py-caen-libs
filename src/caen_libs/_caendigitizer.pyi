import ctypes as ct
from caen_libs import _utils
from enum import IntEnum
from typing import Any, Optional, Tuple, Type, Union

class ErrorCode(IntEnum):
    SUCCESS: int = ...
    COMM_ERROR: int = ...
    GENERIC_ERROR: int = ...
    INVALID_PARAM: int = ...
    INVALID_LINK_TYPE: int = ...
    INVALID_HANDLE: int = ...
    MAX_DEVICES_ERROR: int = ...
    BAD_BOARD_TYPE: int = ...
    BAD_INTERRUPT_LEV: int = ...
    BAD_EVENT_NUMBER: int = ...
    READ_DEVICE_REGISTER_FAIL: int = ...
    WRITE_DEVICE_REGISTER_FAIL: int = ...
    INVALID_CHANNEL_NUMBER: int = ...
    CHANNEL_BUSY: int = ...
    FPIO_MODE_INVALID: int = ...
    WRONG_ACQ_MODE: int = ...
    FUNCTION_NOT_ALLOWED: int = ...
    TIMEOUT: int = ...
    INVALID_BUFFER: int = ...
    EVENT_NOT_FOUND: int = ...
    INVALID_EVENT: int = ...
    OUT_OF_MEMORY: int = ...
    CALIBRATION_ERROR: int = ...
    DIGITIZER_NOT_FOUND: int = ...
    DIGITIZER_ALREADY_OPEN: int = ...
    DIGITIZER_NOT_READY: int = ...
    INTERRUPT_NOT_CONFIGURED: int = ...
    DIGITIZER_MEMORY_CORRUPTED: int = ...
    DPP_FIRMWARE_NOT_SUPPORTED: int = ...
    INVALID_LICENSE: int = ...
    INVALID_DIGITIZER_STATUS: int = ...
    UNSUPPORTED_TRACE: int = ...
    INVALID_PROBE: int = ...
    UNSUPPORTED_BASE_ADDRESS: int = ...
    NOT_YET_IMPLEMENTED: int = ...

class ConnectionType(IntEnum):
    USB: int = ...
    OPTICAL_LINK: int = ...
    USB_A4818: int = ...
    ETH_V4718: int = ...
    USB_V4718: int = ...

class BoardInfo(ct.Structure): ...

class EnaDis(IntEnum):
    ENABLE: int = ...
    DISABLE: int = ...

class IRQMode(IntEnum):
    RORA: int = ...
    ROAK: int = ...

class TriggerMode(IntEnum):
    DISABLED: int = ...
    EXTOUT_ONLY: int = ...
    ACQ_ONLY: int = ...
    ACQ_AND_EXTOUT: int = ...

class Error(RuntimeError):
    code: ErrorCode
    message: str
    func: str
    def __init__(self, res: int, func: str) -> None: ...

class _Lib(_utils.Lib):
    def __init__(self, name: str) -> None: ...
    def sw_release(self) -> str: ...

lib: _Lib

class Device:
    handle: int
    opened: bool = ...
    connection_type: ConnectionType = ...
    arg: Union[int, str] = ...
    conet_node: int = ...
    vme_base_address: int = ...
    def __del__(self) -> None: ...
    @classmethod
    def open(cls: Type[_T], connection_type: ConnectionType, arg: Union[int, str], conet_node: int, vme_base_address: int) -> _T: ...
    def connect(self) -> None: ...
    def close(self) -> None: ...
    def write_register(self, address: int, value: int) -> None: ...
    def read_register(self, address: int) -> int: ...
    def get_info(self) -> BoardInfo: ...
    def reset(self) -> None: ...
    def clear_data(self) -> None: ...
    def send_sw_trigger(self) -> None: ...
    def sw_start_acquisition(self) -> None: ...
    def sw_stop_acquisition(self) -> None: ...
    def set_interrupt_config(self, state: EnaDis, level: int, status_id: int, event_number: int, mode: IRQMode) -> None: ...
    def get_interrupt_config(self) -> Tuple[EnaDis, int, int, int, IRQMode]: ...
    def irq_wait(self, timeout: int) -> None: ...
    def set_des_mode(self, value: int) -> None: ...
    def get_des_mode(self) -> int: ...
    def set_record_length(self, value: int, channel: Optional[int]=...) -> None: ...
    def get_record_length(self, channel: Optional[int]=...) -> int: ...
    def set_channel_enable_mask(self, value: int) -> None: ...
    def get_channel_enable_mask(self) -> int: ...
    def set_group_enable_mask(self, value: int) -> None: ...
    def get_group_enable_mask(self) -> int: ...
    def set_sw_trigger_mode(self, value: TriggerMode) -> None: ...
    def get_sw_trigger_mode(self) -> TriggerMode: ...
    def set_ext_trigger_input_mode(self, value: TriggerMode) -> None: ...
    def get_ext_trigger_input_mode(self) -> TriggerMode: ...
    def set_channel_self_trigger(self, mode: TriggerMode, channel_mask: int) -> None: ...
    def get_channel_self_trigger(self, channel: int) -> TriggerMode: ...
    def set_group_self_trigger(self, mode: TriggerMode, group_mask: int) -> None: ...
    def get_group_self_trigger(self, group: int) -> TriggerMode: ...
    def set_post_trigger_size(self, value: int) -> None: ...
    def get_post_trigger_size(self) -> int: ...
    def set_dpp_pre_trigger_size(self, channel: int, value: int) -> None: ...
    def get_dpp_pre_trigger_size(self, channel: int) -> int: ...
    def device_closed(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...
    def __init__(self, handle: Any, opened: Any, connection_type: Any, arg: Any, conet_node: Any, vme_base_address: Any) -> None: ...
