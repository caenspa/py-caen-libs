from functools import _lru_cache_wrapper
from typing import Any, List, Optional, Tuple

class Lib:
    def __init__(self, name: str) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def path(self) -> Any: ...
    @property
    def lib(self) -> Any: ...
    @property
    def lib_variadic(self) -> Any: ...

def version_to_tuple(version: str) -> Tuple[int, ...]: ...

class CacheManager(List[_lru_cache_wrapper]):
    def clear_all(self) -> None: ...

def lru_cache_method(cache_manager: Optional[CacheManager]=..., maxsize: int=..., typed: bool=...) -> Any: ...
def lru_cache_clear(cache_manager: CacheManager) -> Any: ...
